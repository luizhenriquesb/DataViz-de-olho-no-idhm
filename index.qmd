---
title: "Projeto DataViz: de olho no IDHM brasileiro"
subtitle: "Trabalho Final - Visualização de Dados (Curso-R)"
author: Luiz Henrique da Silva Batista
format: html
editor: visual
---

::: {style="text-align: justify"}
## Introdução

O presente relatório apresenta o processo de criação de uma visualização gráfica sobre o Índice de Desenvolvimento Humano (IDHM) do Brasil. Os datasets utilizados contém uma série de indicadores sobre os municípios brasileiros nos anos de 1991, 2000 e 2010.

Esses indicadores estão originalmente disponíveis no Atlas do Desenvolvimento Humano no Brasil. Felizmente, a equipe da Associação Brasileira de Jurimetria facilita o acesso a esses dados através do pacote `abjData`.

A ideia geral é somente explorar alguns recursos de visualização de dados disponíveis em R, utilizando sobretudo o pacote `ggplot2`.

### Pacotes utilizados

```{r, message=FALSE, results='hide'}
library(tidyverse)
library(geobr)
library(abjData)
library(extrafont)
extrafont::loadfonts("win")
```

### Importação das bases de dados

```{r, message=FALSE, results='hide'}
# Dataset com os indicadores de desenvolvimento humano por município
df <- abjData::pnud_min

# Dataset com as coordenadas dos municípios brasileiros (para fazer o mapa)
shape <- geobr::read_municipality()

# Juntando os datasets em um novo dataframe 
df_shape <- shape |>
  # Criando coluna para join
  mutate(code_muni = as.character(code_muni)) |>
  left_join(df, by = c("code_muni" = "muni_id"))
```

## Mapa do IDHM

Para apresentar a evolução do IDHM dos municípios brasileiros, ao longo dos anos de 1991, 2000 e 2010, vamos usar mapas. Abaixo, ilustramos o passo a passo até a visualização final, após alterar uma série de atributos estéticos.

### Passo 1

Vamos, primeiro, plotar o básico. No código abaixo, iniciamos o `ggplot`, definimos a geometria e já passamos o argumento `facet_wrap` para construir um mapa para cada ano.

```{r, fig.align='center'}
df_shape |>
  ggplot() +
  # Geometria para mapas
  geom_sf() +
  # Criando um plot para cada ano
  facet_wrap(~ano) -> p1

p1
```

```{r, municipiosNA}
# Criando objeto com o nome dos municípios com NA
muni_NA <- df_shape |>
  filter(is.na(ano)) |> pull(name_muni)
```

Veja que temos alguns municípios em que a informação *ano* está ausente. Os municípios são `r muni_NA`. Por esta razão, vamos retirá-los.

### Passo 2

Agora, passamos a função `drop_na()` para retirar as observações ausentes. Além disso, também estamos usando o argumento `aes(fill = idhm)` dentro de `geom_sf()`. Essa função preenche os municípios com seus respectivos IDHM.

```{r, fig.align='center', fig.height=4, fig.width=10}
df_shape |>
  # Removendo NA's
  drop_na() |>
  ggplot() +
  # Geometria para mapas
  geom_sf(
    # Preenchendo os municípios com IDHM
    aes(fill = idhm)
  ) +
  # Criando um plot para cada ano
  facet_wrap(~ano) -> p2

p2
```

Conforme o contorno dos municípios dificulta a visualização do IDHM em determinadas regiões, vamos ter que lidar com isso no próximo passo.

### Passo 3

O argumento `colour` dentro de `geom_sf()` lida com o contorno das geometrias. No caso, decidimos deixar o contorno dos municípios transparente.

```{r, fig.align='center', fig.height=4, fig.width=10}
df_shape |>
  # Removendo NA's
  drop_na() |>
  ggplot() +
  # Geometria para mapas
  geom_sf(
    # Preenchendo os municípios com IDHM
    aes(fill = idhm),
    # Altera a cor do contorno dos municípios
    colour = "transparent"
  ) +
  # Criando um plot para cada ano
  facet_wrap(~ano) -> p3

p3
```

### Passo 4

Aqui, decidimos já usar uma tema pronto. A função `theme_classic()` faz algumas alterações que achamos interessante.

```{r, fig.align='center', fig.height=4, fig.width=10}
df_shape |>
  # Removendo NA's
  drop_na() |>
  ggplot() +
  # Geometria para mapas
  geom_sf(
    # Preenchendo os municípios com IDHM
    aes(fill = idhm),
    # Altera a cor do contorno dos municípios
    colour = "transparent"
  ) +
  # Criando um plot para cada ano
  facet_wrap(~ano) +
  # Usando um tema existente para melhorar a estética do gráfico
  theme_classic() -> p4

p4
```

Perceba que nossos mapas ganharam um aspecto mais minimalista com a redução de informações.

### Passo 5

Vamos, agora, adicionar informações textuais usando a função `labs()`.

```{r, fig.align='center', fig.height=4, fig.width=10}
df_shape |>
  # Removendo NA's
  drop_na() |>
  ggplot() +
  # Geometria para mapas
  geom_sf(
    # Preenchendo os municípios com IDHM
    aes(fill = idhm),
    # Altera a cor do contorno dos municípios
    colour = "transparent"
  ) +
  # Criando um plot para cada ano
  facet_wrap(~ano) +
  # Usando um tema existente para melhorar a estética do gráfico
  theme_classic() +
  # A função labs permite adicionar textos no gráfico
  labs(
    title = "Índice de Desenvolvimento Humano",
    subtitle = "Mapa do IDHM dos municípios brasileiros em 1991, 2000 e 2010",
    # Caption costuma ser usado para apresentar a fonte dos dados
    caption = "Fonte: ATLAS do Brasil | ABJ",
    # Retira o título da escala do IDHM (que cumpre o papel de legenda aqui)
    fill = ""
  ) -> p5

p5
```

Para os nossos propósitos, decidimos adicionar somente título, subtítulo e legenda. Também optamos por retirar o *idhm* que estamos em cima da escala IDHM.

### Passo 6

Daqui em diante, a função `theme()`será extensamente utilizada. Essa função permite "to costumize the non-data components of your plots" (`?theme`).

```{r, fig.align='center', fig.height=4, fig.width=10}
df_shape |>
  # Removendo NA's
  drop_na() |>
  ggplot() +
  # Geometria para mapas
  geom_sf(
    # Preenchendo os municípios com IDHM
    aes(fill = idhm),
    # Altera a cor do contorno dos municípios
    colour = "transparent"
  ) +
  # Criando um plot para cada ano
  facet_wrap(~ano) +
  # Usando um tema existente para melhorar a estética do gráfico
  theme_classic() +
  # A função labs permite adicionar textos no gráfico
  labs(
    title = "Índice de Desenvolvimento Humano",
    subtitle = "Mapa do IDHM dos municípios brasileiros em 1991, 2000 e 2010",
    # Caption costuma ser usado para apresentar a fonte dos dados
    caption = "Fonte: ATLAS do Brasil | ABJ",
    # Retira o título da escala do IDHM (que cumpre o papel de legenda aqui)
    fill = ""
  ) +
  # A função theme permite alterar uma série de atributos
  theme(
    # Texto do título
    plot.title = element_text(
      color = "#4e4d47",
      size = 14,
      face = "bold",
      family = "Calibri",
      hjust = 0
    ),
    # Texto do subtítulo
    plot.subtitle = element_text(
      color = "#4e4d47",
      size = 14,
      family = "Calibri",
      hjust = 0
    ),
    # Texto da fonte
    plot.caption = element_text(
      color = "#4e4d47",
      size = 10,
      family = "Calibri",
      hjust = 0,
      vjust = 2
    )
  ) -> p6

p6
```

Para começar, fizemos algumas alterações no título, subtítulo e fonte. Mudamos a cor, o tamanho das letras, a fonte e o posicionamento.

### Passo 7

Ainda utilizando a função `theme()`, vamos modificar o fundo dos mapas, do painel e da legenda.

```{r, fig.align='center', fig.height=4, fig.width=10}
df_shape |>
  # Removendo NA's
  drop_na() |>
  ggplot() +
  # Geometria para mapas
  geom_sf(
    # Preenchendo os municípios com IDHM
    aes(fill = idhm),
    # Altera a cor do contorno dos municípios
    colour = "transparent"
  ) +
  # Criando um plot para cada ano
  facet_wrap(~ano) +
  # Altera a escala de cores do mapa
  #scale_fill_viridis_c() +
  # Usando um tema existente para melhorar a estética do gráfico
  theme_classic() +
  # A função labs permite adicionar textos no gráfico
  labs(
    title = "Índice de Desenvolvimento Humano",
    subtitle = "Mapa do IDHM dos municípios brasileiros em 1991, 2000 e 2010",
    # Caption costuma ser usado para apresentar a fonte dos dados
    caption = "Fonte: ATLAS do Brasil | ABJ",
    # Retira o título da escala do IDHM (que cumpre o papel de legenda aqui)
    fill = ""
  ) +
  # A função theme permite alterar uma série de atributos
  theme(
    # Texto do título
    plot.title = element_text(
      color = "#4e4d47",
      size = 14,
      face = "bold",
      family = "Calibri",
      hjust = 0
    ),
    # Texto do subtítulo
    plot.subtitle = element_text(
      color = "#4e4d47",
      size = 14,
      family = "Calibri",
      hjust = 0
    ),
    # Texto da fonte
    plot.caption = element_text(
      color = "#4e4d47",
      size = 10,
      family = "Calibri",
      hjust = 0,
      vjust = 2
    ),
    # Fundo dos mapas
    plot.background = element_rect(
      # Altera o preenchimento
      fill = "#f5f5f2",
      # Altera o contorno
      colour = NA),
    # Fundo do painel
    panel.background = element_rect(
      # Altera o preenchimento
      fill = "#f5f5f2",
      # Altera o contorno
      colour = NA),
    # Fundo da legenda
    legend.background = element_rect(
      # Altera o preenchimento
      fill = NA,
      # Altera o contorno
      colour = NA)
  ) -> p7

p7
```

### Passo 8

Alteramos, agora, o texto da legenda e das "caixinhas" que contém os anos. Também alteramos a cor dessas caixinhas.

```{r, fig.align='center', fig.height=4, fig.width=10}
df_shape |>
  # Removendo NA's
  drop_na() |>
  ggplot() +
  # Geometria para mapas
  geom_sf(
    # Preenchendo os municípios com IDHM
    aes(fill = idhm),
    # Altera a cor do contorno dos municípios
    colour = "transparent"
  ) +
  # Criando um plot para cada ano
  facet_wrap(~ano) +
  # Altera a escala de cores do mapa
  #scale_fill_viridis_c() +
  # Usando um tema existente para melhorar a estética do gráfico
  theme_classic() +
  # A função labs permite adicionar textos no gráfico
  labs(
    title = "Índice de Desenvolvimento Humano",
    subtitle = "Mapa do IDHM dos municípios brasileiros em 1991, 2000 e 2010",
    # Caption costuma ser usado para apresentar a fonte dos dados
    caption = "Fonte: ATLAS do Brasil | ABJ",
    # Retira o título da escala do IDHM (que cumpre o papel de legenda aqui)
    fill = ""
  ) +
  # A função theme permite alterar uma série de atributos
  theme(
    # Texto do título
    plot.title = element_text(
      color = "#4e4d47",
      size = 14,
      face = "bold",
      family = "Calibri",
      hjust = 0
    ),
    # Texto do subtítulo
    plot.subtitle = element_text(
      color = "#4e4d47",
      size = 14,
      family = "Calibri",
      hjust = 0
    ),
    # Texto da fonte
    plot.caption = element_text(
      color = "#4e4d47",
      size = 10,
      family = "Calibri",
      hjust = 0,
      vjust = 2
    ),
    # Fundo dos mapas
    plot.background = element_rect(
      # Altera o preenchimento
      fill = "#f5f5f2",
      # Altera o contorno
      colour = NA),
    # Fundo do painel
    panel.background = element_rect(
      # Altera o preenchimento
      fill = "#f5f5f2",
      # Altera o contorno
      colour = NA),
    # Fundo da legenda
    legend.background = element_rect(
      # Altera o preenchimento
      fill = NA,
      # Altera o contorno
      colour = NA),
    # Texto da legenda
    legend.text = element_text(
      colour = "#4e4d47",
      size = 11,
      face = "bold",
      family = "Calibri"
    ),
    # Textos do facet (1991, 2000 e 2010)
    strip.text = element_text(
      size = 12,
      family = "Calibri",
      colour = "#f5f5f2",
      face = "bold"
    ),
    # "Caixinhas" do facet
    strip.background = element_rect(
      colour = "transparent",
      fill = "#919191")
  ) -> p8

p8
```

### Passo 9 

Com os argumentos `axis` é possível alterar atributos dos eixos X e Y.

```{r, fig.align='center', fig.height=4, fig.width=10}
df_shape |>
  # Removendo NA's
  drop_na() |>
  ggplot() +
  # Geometria para mapas
  geom_sf(
    # Preenchendo os municípios com IDHM
    aes(fill = idhm),
    # Altera a cor do contorno dos municípios
    colour = "transparent"
  ) +
  # Criando um plot para cada ano
  facet_wrap(~ano) +
  # Altera a escala de cores do mapa
  #scale_fill_viridis_c() +
  # Usando um tema existente para melhorar a estética do gráfico
  theme_classic() +
  # A função labs permite adicionar textos no gráfico
  labs(
    title = "Índice de Desenvolvimento Humano",
    subtitle = "Mapa do IDHM dos municípios brasileiros em 1991, 2000 e 2010",
    # Caption costuma ser usado para apresentar a fonte dos dados
    caption = "Fonte: ATLAS do Brasil | ABJ",
    # Retira o título da escala do IDHM (que cumpre o papel de legenda aqui)
    fill = ""
  ) +
  # A função theme permite alterar uma série de atributos
  theme(
    # Texto do título
    plot.title = element_text(
      color = "#4e4d47",
      size = 14,
      face = "bold",
      family = "Calibri",
      hjust = 0
    ),
    # Texto do subtítulo
    plot.subtitle = element_text(
      color = "#4e4d47",
      size = 14,
      family = "Calibri",
      hjust = 0
    ),
    # Texto da fonte
    plot.caption = element_text(
      color = "#4e4d47",
      size = 10,
      family = "Calibri",
      hjust = 0,
      vjust = 2
    ),
    # Fundo dos mapas
    plot.background = element_rect(
      # Altera o preenchimento
      fill = "#f5f5f2",
      # Altera o contorno
      colour = NA),
    # Fundo do painel
    panel.background = element_rect(
      # Altera o preenchimento
      fill = "#f5f5f2",
      # Altera o contorno
      colour = NA),
    # Fundo da legenda
    legend.background = element_rect(
      # Altera o preenchimento
      fill = NA,
      # Altera o contorno
      colour = NA),
    # Texto da legenda
    legend.text = element_text(
      colour = "#4e4d47",
      size = 11,
      face = "bold",
      family = "Calibri"
    ),
    # Textos do facet (1991, 2000 e 2010)
    strip.text = element_text(
      size = 12,
      family = "Calibri",
      colour = "#f5f5f2",
      face = "bold"
    ),
    # "Caixinhas" do facet
    strip.background = element_rect(
      colour = "transparent",
      fill = "#919191"),
    # Textos das linhas das coordenadas
    axis.text = element_blank(),
    # Linhas das coordenadas
    axis.line = element_blank(),
    # "Tracinhos" das linhas das coordenadas
    axis.ticks = element_blank()
  ) -> p9

p9
```

### Passo 10

Decidimos alterar a posição da legenda, deixando-a no centro inferior do gráfico.

```{r, fig.align='center', fig.height=4, fig.width=10}
df_shape |>
  # Removendo NA's
  drop_na() |>
  ggplot() +
  # Geometria para mapas
  geom_sf(
    # Preenchendo os municípios com IDHM
    aes(fill = idhm),
    # Altera a cor do contorno dos municípios
    colour = "transparent"
  ) +
  # Criando um plot para cada ano
  facet_wrap(~ano) +
  # Altera a escala de cores do mapa
  #scale_fill_viridis_c() +
  # Usando um tema existente para melhorar a estética do gráfico
  theme_classic() +
  # A função labs permite adicionar textos no gráfico
  labs(
    title = "Índice de Desenvolvimento Humano",
    subtitle = "Mapa do IDHM dos municípios brasileiros em 1991, 2000 e 2010",
    # Caption costuma ser usado para apresentar a fonte dos dados
    caption = "Fonte: ATLAS do Brasil | ABJ",
    # Retira o título da escala do IDHM (que cumpre o papel de legenda aqui)
    fill = ""
  ) +
  # A função theme permite alterar uma série de atributos
  theme(
    # Texto do título
    plot.title = element_text(
      color = "#4e4d47",
      size = 14,
      face = "bold",
      family = "Calibri",
      hjust = 0
    ),
    # Texto do subtítulo
    plot.subtitle = element_text(
      color = "#4e4d47",
      size = 14,
      family = "Calibri",
      hjust = 0
    ),
    # Texto da fonte
    plot.caption = element_text(
      color = "#4e4d47",
      size = 10,
      family = "Calibri",
      hjust = 0,
      vjust = 2
    ),
    # Fundo dos mapas
    plot.background = element_rect(
      # Altera o preenchimento
      fill = "#f5f5f2",
      # Altera o contorno
      colour = NA),
    # Fundo do painel
    panel.background = element_rect(
      # Altera o preenchimento
      fill = "#f5f5f2",
      # Altera o contorno
      colour = NA),
    # Fundo da legenda
    legend.background = element_rect(
      # Altera o preenchimento
      fill = NA,
      # Altera o contorno
      colour = NA),
    # Texto da legenda
    legend.text = element_text(
      colour = "#4e4d47",
      size = 11,
      face = "bold",
      family = "Calibri"
    ),
    # Textos do facet (1991, 2000 e 2010)
    strip.text = element_text(
      size = 12,
      family = "Calibri",
      colour = "#f5f5f2",
      face = "bold"
    ),
    # "Caixinhas" do facet
    strip.background = element_rect(
      colour = "transparent",
      fill = "#919191"),
    # Textos das linhas das coordenadas
    axis.text = element_blank(),
    # Linhas das coordenadas
    axis.line = element_blank(),
    # "Tracinhos" das linhas das coordenadas
    axis.ticks = element_blank(),
    # Posição da legenda no mapa c(horizontal, vertical)
    legend.position = c(.5, 0.01),
    # Direção da legenda
    legend.direction = "horizontal"
  ) -> p10 

p10
```

No próximo passo, vamos fazer algumas alterações na legenda. 

### Passo 11

Personalizando a legenda e alterando a escala de cores.

```{r, fig.align='center', fig.height=4, fig.width=10, fig.width=10}
p10 +
  # Altera a cor da escala para variáveis contínuas
  scale_fill_viridis_c(guide = guide_legend(
    keywidth = unit(10, units = "mm"),
    keyheight = unit(3, units = "mm"),
    nrow = 1,
    label.position = "top",
    title.position = "top",
    label.vjust = 0,
    title.vjust = 0,
    reverse = FALSE,
    byrow = TRUE
  ),
  breaks = seq(0, 1, by = 0.1)
  ) -> p11

p11
```

# Bônus: animação com todos os passos!

Para fazer essa animação, basta passar o argumento `fig.show='animate'` no Chunk e printar os gráficos dentro. Foi por isso que salvamos cada nova alteração em um novo objeto.

```{r, fig.show='animate', fig.s, fig.align='center', fig.height=4, fig.width=10, fig.width=10}
#| echo: false
p1
p2
p3
p4
p5
p6
p7
p8
p9
p10
p11
p11
p11
p10
p9
p8
p7
p6
p5
p4
p3
p2
p1
```

:::
